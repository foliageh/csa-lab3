[tool.poetry]
name = "csa-lab3"
version = "0.1.0"
description = "Lab work #3 for Computer Architecture class"
authors = ["foliageh"]
readme = "README.md"
packages = [{include="*", from="csa_lab3"}]

[tool.poetry.dependencies]
python = "^3.12"

[tool.poetry.group.dev.dependencies]
ruff = "^0.4.4"
mypy = "^1.10.0"  # currently unused... TODO?

[tool.poetry.group.test.dependencies]
pytest = "^8.2.1"
pytest-golden = "^0.2.2"
coverage = "^7.5.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
pythonpath = "src"
enable_assertion_pass_hook = true
addopts = "--doctest-modules"
log_format = "%(levelname)-7s %(module)s:%(funcName)-13s %(message)s"

[tool.ruff]
line-length = 130
indent-width = 4

[tool.ruff.format]
preview = true
quote-style = "single"

[tool.ruff.lint]
preview = true
select = [
    # https://docs.astral.sh/ruff/rules/
    "F",    # pep8-naming (style linter, pep8 naming conventions)
    "E",    # pycodestyle (style linter, pep8, black-compatible) - errors
    "W",    # pycodestyle - warnings
    "C90",  # mccabe (cyclomatic complexity analyzer to prevent overcomplicated functions)
    "I",    # isort (imports sorting)
    "N",    # pep8-naming (style linter, pep8 naming conventions)
    "UP",   # pyupgrade (possible syntax upgrades checker)
    # "ANN",  # flake8-annotations (enforces presense of type hints so the codebase is fully typed) # too burdensome
    "B",    # flake8-bugbear (bugs and design problems)
    "A",    # flake8-builtins (checks builtin names shadowing, it's better not to)
    "COM",  # flake8-commas (to enforce trailing commas)
    "C4",   # flake8-comprehensions (helps to write better list/set/dict comprehensions)
    # "FA",   # flake8-future-annotations (to ensure enabling modern (3.7+) postponed evaluation of type hints)
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions (to enforce standartized import aliases like "import pandas as pd")
    "INP",  # flake8-no-pep420 (to enforce presence of __init__.py in packages)
    "PIE",  # flake8-pie (misc. lints)
    "T20",  # flake8-print (to disallow print statements)
    "PT",   # flake8-pytest-style (to improve pytest-related style consistency)
    "Q",    # flake8-quotes (to enforce quotes style)
    "RSE",  # flake8-raise (unnecessary parentheses on raised exception)
    "RET",  # flake8-return (checks mistakes related to return values)
    "SLF",  # flake8-self (private member accessed)
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib (to enforce pathlib usage instead of os.path)
    # "ERA",  # eradicate (commented-out code finder for it to be removed)
    "TRY",  # tryceratops (try/except-related advices)
    "PERF", # Perflint
    "RUF",  # ruff-specific advices
]
ignore = [
    "E501",   # allow lines longer than 80 symbols
    "E701",   # Multiple statements on one line (colon)
    "F405",   # `BlaBlaBla` may be undefined, or defined from star imports
    "T201",   # `print` found
    "RUF002", # Docstring contains ambiguous `В` (CYRILLIC CAPITAL LETTER VE). Did you mean `B` (LATIN CAPITAL LETTER B)
    "RUF003", # Comment contains ambiguous `с` (CYRILLIC SMALL LETTER ES). Did you mean `c` (LATIN SMALL LETTER C)
    "PTH123", # `open()` should be replaced by `Path.open()`
    "PTH118", # `os.path.join()` should be replaced by `Path` with `/` operator
    "COM812", # The following rules may cause conflicts when used with the formatter: `COM812`.
    "ISC001", # The following rules may cause conflicts when used with the formatter: `ISC001`.
]
unfixable = [
    "ERA001", # prohibit to "auto-fix" (=remove) commented-out code
]
flake8-quotes.inline-quotes = "single"
mccabe.max-complexity = 12
